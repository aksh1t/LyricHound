// This class was generated by the JAXRPC SI, do not edit.
// Contents subject to change without notice.
// JAX-RPC Standard Implementation (1.1.3, build R1)
// Generated source version: 1.1.3

package webservice;

import com.sun.xml.rpc.server.http.MessageContextProperties;
import com.sun.xml.rpc.streaming.*;
import com.sun.xml.rpc.encoding.*;
import com.sun.xml.rpc.encoding.soap.SOAPConstants;
import com.sun.xml.rpc.encoding.soap.SOAP12Constants;
import com.sun.xml.rpc.encoding.literal.*;
import com.sun.xml.rpc.soap.streaming.*;
import com.sun.xml.rpc.soap.message.*;
import com.sun.xml.rpc.soap.SOAPVersion;
import com.sun.xml.rpc.soap.SOAPEncodingConstants;
import com.sun.xml.rpc.wsdl.document.schema.SchemaConstants;
import javax.xml.namespace.QName;
import java.rmi.RemoteException;
import java.util.Iterator;
import java.lang.reflect.*;
import java.lang.Class;
import com.sun.xml.rpc.client.SenderException;
import com.sun.xml.rpc.client.*;
import com.sun.xml.rpc.client.http.*;
import javax.xml.rpc.handler.*;
import javax.xml.rpc.JAXRPCException;
import javax.xml.rpc.soap.SOAPFaultException;

public class LyricWikiPortType_Stub
    extends com.sun.xml.rpc.client.StubBase
    implements webservice.LyricWikiPortType {
    
    
    
    /*
     *  public constructor
     */
    public LyricWikiPortType_Stub(HandlerChain handlerChain) {
        super(handlerChain);
        _setProperty(ENDPOINT_ADDRESS_PROPERTY, "http://lyrics.wikia.com/server.php");
    }
    
    
    /*
     *  implementation of getArtist
     */
    public void getArtist(javax.xml.rpc.holders.StringHolder artist, webservice.holders.AlbumDataArrayHolder albums)
        throws java.rmi.RemoteException {
        
        if (artist == null) {
            throw new IllegalArgumentException("artist cannot be null");
        }
        if (albums == null) {
            throw new IllegalArgumentException("albums cannot be null");
        }
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(getArtist_OPCODE);
            webservice.LyricWikiPortType_getArtist_RequestStruct _myLyricWikiPortType_getArtist_RequestStruct =
                new webservice.LyricWikiPortType_getArtist_RequestStruct();
            
            _myLyricWikiPortType_getArtist_RequestStruct.setArtist(artist.value);
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_getArtist_getArtist_QNAME);
            _bodyBlock.setValue(_myLyricWikiPortType_getArtist_RequestStruct);
            _bodyBlock.setSerializer(ns1_myLyricWikiPortType_getArtist_RequestStruct_SOAPSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "urn:LyricWiki#getArtist");
            
            _send((java.lang.String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            webservice.LyricWikiPortType_getArtist_ResponseStruct _myLyricWikiPortType_getArtist_ResponseStruct = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _myLyricWikiPortType_getArtist_ResponseStruct =
                    (webservice.LyricWikiPortType_getArtist_ResponseStruct)((SOAPDeserializationState)_responseObj).getInstance();
            } else {
                _myLyricWikiPortType_getArtist_ResponseStruct =
                    (webservice.LyricWikiPortType_getArtist_ResponseStruct)_responseObj;
            }
            
            artist.value =
                _myLyricWikiPortType_getArtist_ResponseStruct.getArtist();
            albums.value =
                _myLyricWikiPortType_getArtist_ResponseStruct.getAlbums();
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of getTopSongs
     */
    public webservice.TopSong[] getTopSongs(java.lang.String limit)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(getTopSongs_OPCODE);
            webservice.LyricWikiPortType_getTopSongs_RequestStruct _myLyricWikiPortType_getTopSongs_RequestStruct =
                new webservice.LyricWikiPortType_getTopSongs_RequestStruct();
            
            _myLyricWikiPortType_getTopSongs_RequestStruct.setLimit(limit);
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_getTopSongs_getTopSongs_QNAME);
            _bodyBlock.setValue(_myLyricWikiPortType_getTopSongs_RequestStruct);
            _bodyBlock.setSerializer(ns1_myLyricWikiPortType_getTopSongs_RequestStruct_SOAPSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "urn:LyricWiki#getTopSongs");
            
            _send((java.lang.String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            webservice.LyricWikiPortType_getTopSongs_ResponseStruct _myLyricWikiPortType_getTopSongs_ResponseStruct = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _myLyricWikiPortType_getTopSongs_ResponseStruct =
                    (webservice.LyricWikiPortType_getTopSongs_ResponseStruct)((SOAPDeserializationState)_responseObj).getInstance();
            } else {
                _myLyricWikiPortType_getTopSongs_ResponseStruct =
                    (webservice.LyricWikiPortType_getTopSongs_ResponseStruct)_responseObj;
            }
            
            return _myLyricWikiPortType_getTopSongs_ResponseStruct.getTopSongs();
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of getHometown
     */
    public void getHometown(java.lang.String artist, javax.xml.rpc.holders.StringHolder country, javax.xml.rpc.holders.StringHolder state, javax.xml.rpc.holders.StringHolder hometown)
        throws java.rmi.RemoteException {
        
        if (country == null) {
            throw new IllegalArgumentException("country cannot be null");
        }
        if (state == null) {
            throw new IllegalArgumentException("state cannot be null");
        }
        if (hometown == null) {
            throw new IllegalArgumentException("hometown cannot be null");
        }
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(getHometown_OPCODE);
            webservice.LyricWikiPortType_getHometown_RequestStruct _myLyricWikiPortType_getHometown_RequestStruct =
                new webservice.LyricWikiPortType_getHometown_RequestStruct();
            
            _myLyricWikiPortType_getHometown_RequestStruct.setArtist(artist);
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_getHometown_getHometown_QNAME);
            _bodyBlock.setValue(_myLyricWikiPortType_getHometown_RequestStruct);
            _bodyBlock.setSerializer(ns1_myLyricWikiPortType_getHometown_RequestStruct_SOAPSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "urn:LyricWiki#getHometown");
            
            _send((java.lang.String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            webservice.LyricWikiPortType_getHometown_ResponseStruct _myLyricWikiPortType_getHometown_ResponseStruct = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _myLyricWikiPortType_getHometown_ResponseStruct =
                    (webservice.LyricWikiPortType_getHometown_ResponseStruct)((SOAPDeserializationState)_responseObj).getInstance();
            } else {
                _myLyricWikiPortType_getHometown_ResponseStruct =
                    (webservice.LyricWikiPortType_getHometown_ResponseStruct)_responseObj;
            }
            
            country.value =
                _myLyricWikiPortType_getHometown_ResponseStruct.getCountry();
            state.value =
                _myLyricWikiPortType_getHometown_ResponseStruct.getState();
            hometown.value =
                _myLyricWikiPortType_getHometown_ResponseStruct.getHometown();
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of searchArtists
     */
    public java.lang.String[] searchArtists(java.lang.String searchString)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(searchArtists_OPCODE);
            webservice.LyricWikiPortType_searchArtists_RequestStruct _myLyricWikiPortType_searchArtists_RequestStruct =
                new webservice.LyricWikiPortType_searchArtists_RequestStruct();
            
            _myLyricWikiPortType_searchArtists_RequestStruct.setSearchString(searchString);
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_searchArtists_searchArtists_QNAME);
            _bodyBlock.setValue(_myLyricWikiPortType_searchArtists_RequestStruct);
            _bodyBlock.setSerializer(ns1_myLyricWikiPortType_searchArtists_RequestStruct_SOAPSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "urn:LyricWiki#searchArtists");
            
            _send((java.lang.String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            webservice.LyricWikiPortType_searchArtists_ResponseStruct _myLyricWikiPortType_searchArtists_ResponseStruct = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _myLyricWikiPortType_searchArtists_ResponseStruct =
                    (webservice.LyricWikiPortType_searchArtists_ResponseStruct)((SOAPDeserializationState)_responseObj).getInstance();
            } else {
                _myLyricWikiPortType_searchArtists_ResponseStruct =
                    (webservice.LyricWikiPortType_searchArtists_ResponseStruct)_responseObj;
            }
            
            return _myLyricWikiPortType_searchArtists_ResponseStruct.get_return();
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of getSongResult
     */
    public webservice.LyricsResult getSongResult(java.lang.String artist, java.lang.String song)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(getSongResult_OPCODE);
            webservice.LyricWikiPortType_getSongResult_RequestStruct _myLyricWikiPortType_getSongResult_RequestStruct =
                new webservice.LyricWikiPortType_getSongResult_RequestStruct();
            
            _myLyricWikiPortType_getSongResult_RequestStruct.setArtist(artist);
            _myLyricWikiPortType_getSongResult_RequestStruct.setSong(song);
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_getSongResult_getSongResult_QNAME);
            _bodyBlock.setValue(_myLyricWikiPortType_getSongResult_RequestStruct);
            _bodyBlock.setSerializer(ns1_myLyricWikiPortType_getSongResult_RequestStruct_SOAPSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "urn:LyricWiki#getSongResult");
            
            _send((java.lang.String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            webservice.LyricWikiPortType_getSongResult_ResponseStruct _myLyricWikiPortType_getSongResult_ResponseStruct = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _myLyricWikiPortType_getSongResult_ResponseStruct =
                    (webservice.LyricWikiPortType_getSongResult_ResponseStruct)((SOAPDeserializationState)_responseObj).getInstance();
            } else {
                _myLyricWikiPortType_getSongResult_ResponseStruct =
                    (webservice.LyricWikiPortType_getSongResult_ResponseStruct)_responseObj;
            }
            
            return _myLyricWikiPortType_getSongResult_ResponseStruct.getSongResult();
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of getSong
     */
    public webservice.LyricsResult getSong(java.lang.String artist, java.lang.String song)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(getSong_OPCODE);
            webservice.LyricWikiPortType_getSong_RequestStruct _myLyricWikiPortType_getSong_RequestStruct =
                new webservice.LyricWikiPortType_getSong_RequestStruct();
            
            _myLyricWikiPortType_getSong_RequestStruct.setArtist(artist);
            _myLyricWikiPortType_getSong_RequestStruct.setSong(song);
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_getSong_getSong_QNAME);
            _bodyBlock.setValue(_myLyricWikiPortType_getSong_RequestStruct);
            _bodyBlock.setSerializer(ns1_myLyricWikiPortType_getSong_RequestStruct_SOAPSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "urn:LyricWiki#getSong");
            
            _send((java.lang.String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            webservice.LyricWikiPortType_getSong_ResponseStruct _myLyricWikiPortType_getSong_ResponseStruct = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _myLyricWikiPortType_getSong_ResponseStruct =
                    (webservice.LyricWikiPortType_getSong_ResponseStruct)((SOAPDeserializationState)_responseObj).getInstance();
            } else {
                _myLyricWikiPortType_getSong_ResponseStruct =
                    (webservice.LyricWikiPortType_getSong_ResponseStruct)_responseObj;
            }
            
            return _myLyricWikiPortType_getSong_ResponseStruct.get_return();
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of postSong
     */
    public void postSong(boolean overwriteIfExists, javax.xml.rpc.holders.StringHolder artist, javax.xml.rpc.holders.StringHolder song, java.lang.String lyrics, java.lang.String language, webservice.AlbumResult[] onAlbums, javax.xml.rpc.holders.BooleanHolder dataUsed, javax.xml.rpc.holders.StringHolder message)
        throws java.rmi.RemoteException {
        
        if (artist == null) {
            throw new IllegalArgumentException("artist cannot be null");
        }
        if (song == null) {
            throw new IllegalArgumentException("song cannot be null");
        }
        if (dataUsed == null) {
            throw new IllegalArgumentException("dataUsed cannot be null");
        }
        if (message == null) {
            throw new IllegalArgumentException("message cannot be null");
        }
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(postSong_OPCODE);
            webservice.LyricWikiPortType_postSong_RequestStruct _myLyricWikiPortType_postSong_RequestStruct =
                new webservice.LyricWikiPortType_postSong_RequestStruct();
            
            _myLyricWikiPortType_postSong_RequestStruct.setOverwriteIfExists(overwriteIfExists);
            _myLyricWikiPortType_postSong_RequestStruct.setArtist(artist.value);
            _myLyricWikiPortType_postSong_RequestStruct.setSong(song.value);
            _myLyricWikiPortType_postSong_RequestStruct.setLyrics(lyrics);
            _myLyricWikiPortType_postSong_RequestStruct.setLanguage(language);
            _myLyricWikiPortType_postSong_RequestStruct.setOnAlbums(onAlbums);
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_postSong_postSong_QNAME);
            _bodyBlock.setValue(_myLyricWikiPortType_postSong_RequestStruct);
            _bodyBlock.setSerializer(ns1_myLyricWikiPortType_postSong_RequestStruct_SOAPSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "urn:LyricWiki#postSong");
            
            _send((java.lang.String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            webservice.LyricWikiPortType_postSong_ResponseStruct _myLyricWikiPortType_postSong_ResponseStruct = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _myLyricWikiPortType_postSong_ResponseStruct =
                    (webservice.LyricWikiPortType_postSong_ResponseStruct)((SOAPDeserializationState)_responseObj).getInstance();
            } else {
                _myLyricWikiPortType_postSong_ResponseStruct =
                    (webservice.LyricWikiPortType_postSong_ResponseStruct)_responseObj;
            }
            
            artist.value =
                _myLyricWikiPortType_postSong_ResponseStruct.getArtist();
            song.value =
                _myLyricWikiPortType_postSong_ResponseStruct.getSong();
            dataUsed.value =
                _myLyricWikiPortType_postSong_ResponseStruct.isDataUsed();
            message.value =
                _myLyricWikiPortType_postSong_ResponseStruct.getMessage();
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of checkSongExists
     */
    public boolean checkSongExists(java.lang.String artist, java.lang.String song)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(checkSongExists_OPCODE);
            webservice.LyricWikiPortType_checkSongExists_RequestStruct _myLyricWikiPortType_checkSongExists_RequestStruct =
                new webservice.LyricWikiPortType_checkSongExists_RequestStruct();
            
            _myLyricWikiPortType_checkSongExists_RequestStruct.setArtist(artist);
            _myLyricWikiPortType_checkSongExists_RequestStruct.setSong(song);
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_checkSongExists_checkSongExists_QNAME);
            _bodyBlock.setValue(_myLyricWikiPortType_checkSongExists_RequestStruct);
            _bodyBlock.setSerializer(ns1_myLyricWikiPortType_checkSongExists_RequestStruct_SOAPSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "urn:LyricWiki#checkSongExists");
            
            _send((java.lang.String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            webservice.LyricWikiPortType_checkSongExists_ResponseStruct _myLyricWikiPortType_checkSongExists_ResponseStruct = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _myLyricWikiPortType_checkSongExists_ResponseStruct =
                    (webservice.LyricWikiPortType_checkSongExists_ResponseStruct)((SOAPDeserializationState)_responseObj).getInstance();
            } else {
                _myLyricWikiPortType_checkSongExists_ResponseStruct =
                    (webservice.LyricWikiPortType_checkSongExists_ResponseStruct)_responseObj;
            }
            
            return _myLyricWikiPortType_checkSongExists_ResponseStruct.is_return();
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of postSong_flags
     */
    public void postSong_flags(boolean overwriteIfExists, javax.xml.rpc.holders.StringHolder artist, javax.xml.rpc.holders.StringHolder song, java.lang.String lyrics, webservice.AlbumResult[] onAlbums, java.lang.String flags, java.lang.String language, javax.xml.rpc.holders.BooleanHolder dataUsed, javax.xml.rpc.holders.StringHolder message)
        throws java.rmi.RemoteException {
        
        if (artist == null) {
            throw new IllegalArgumentException("artist cannot be null");
        }
        if (song == null) {
            throw new IllegalArgumentException("song cannot be null");
        }
        if (dataUsed == null) {
            throw new IllegalArgumentException("dataUsed cannot be null");
        }
        if (message == null) {
            throw new IllegalArgumentException("message cannot be null");
        }
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(postSong_flags_OPCODE);
            webservice.LyricWikiPortType_postSong_flags_RequestStruct _myLyricWikiPortType_postSong_flags_RequestStruct =
                new webservice.LyricWikiPortType_postSong_flags_RequestStruct();
            
            _myLyricWikiPortType_postSong_flags_RequestStruct.setOverwriteIfExists(overwriteIfExists);
            _myLyricWikiPortType_postSong_flags_RequestStruct.setArtist(artist.value);
            _myLyricWikiPortType_postSong_flags_RequestStruct.setSong(song.value);
            _myLyricWikiPortType_postSong_flags_RequestStruct.setLyrics(lyrics);
            _myLyricWikiPortType_postSong_flags_RequestStruct.setOnAlbums(onAlbums);
            _myLyricWikiPortType_postSong_flags_RequestStruct.setFlags(flags);
            _myLyricWikiPortType_postSong_flags_RequestStruct.setLanguage(language);
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_postSong_flags_postSong_flags_QNAME);
            _bodyBlock.setValue(_myLyricWikiPortType_postSong_flags_RequestStruct);
            _bodyBlock.setSerializer(ns1_myLyricWikiPortType_postSong_flags_RequestStruct_SOAPSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "urn:LyricWiki#postSong_flags");
            
            _send((java.lang.String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            webservice.LyricWikiPortType_postSong_flags_ResponseStruct _myLyricWikiPortType_postSong_flags_ResponseStruct = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _myLyricWikiPortType_postSong_flags_ResponseStruct =
                    (webservice.LyricWikiPortType_postSong_flags_ResponseStruct)((SOAPDeserializationState)_responseObj).getInstance();
            } else {
                _myLyricWikiPortType_postSong_flags_ResponseStruct =
                    (webservice.LyricWikiPortType_postSong_flags_ResponseStruct)_responseObj;
            }
            
            artist.value =
                _myLyricWikiPortType_postSong_flags_ResponseStruct.getArtist();
            song.value =
                _myLyricWikiPortType_postSong_flags_ResponseStruct.getSong();
            dataUsed.value =
                _myLyricWikiPortType_postSong_flags_ResponseStruct.isDataUsed();
            message.value =
                _myLyricWikiPortType_postSong_flags_ResponseStruct.getMessage();
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of searchAlbums
     */
    public webservice.AlbumResult[] searchAlbums(java.lang.String artist, java.lang.String album, int year)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(searchAlbums_OPCODE);
            webservice.LyricWikiPortType_searchAlbums_RequestStruct _myLyricWikiPortType_searchAlbums_RequestStruct =
                new webservice.LyricWikiPortType_searchAlbums_RequestStruct();
            
            _myLyricWikiPortType_searchAlbums_RequestStruct.setArtist(artist);
            _myLyricWikiPortType_searchAlbums_RequestStruct.setAlbum(album);
            _myLyricWikiPortType_searchAlbums_RequestStruct.setYear(year);
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_searchAlbums_searchAlbums_QNAME);
            _bodyBlock.setValue(_myLyricWikiPortType_searchAlbums_RequestStruct);
            _bodyBlock.setSerializer(ns1_myLyricWikiPortType_searchAlbums_RequestStruct_SOAPSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "urn:LyricWiki#searchAlbums");
            
            _send((java.lang.String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            webservice.LyricWikiPortType_searchAlbums_ResponseStruct _myLyricWikiPortType_searchAlbums_ResponseStruct = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _myLyricWikiPortType_searchAlbums_ResponseStruct =
                    (webservice.LyricWikiPortType_searchAlbums_ResponseStruct)((SOAPDeserializationState)_responseObj).getInstance();
            } else {
                _myLyricWikiPortType_searchAlbums_ResponseStruct =
                    (webservice.LyricWikiPortType_searchAlbums_ResponseStruct)_responseObj;
            }
            
            return _myLyricWikiPortType_searchAlbums_ResponseStruct.get_return();
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of searchSongs
     */
    public webservice.SongResult searchSongs(java.lang.String artist, java.lang.String song)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(searchSongs_OPCODE);
            webservice.LyricWikiPortType_searchSongs_RequestStruct _myLyricWikiPortType_searchSongs_RequestStruct =
                new webservice.LyricWikiPortType_searchSongs_RequestStruct();
            
            _myLyricWikiPortType_searchSongs_RequestStruct.setArtist(artist);
            _myLyricWikiPortType_searchSongs_RequestStruct.setSong(song);
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_searchSongs_searchSongs_QNAME);
            _bodyBlock.setValue(_myLyricWikiPortType_searchSongs_RequestStruct);
            _bodyBlock.setSerializer(ns1_myLyricWikiPortType_searchSongs_RequestStruct_SOAPSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "urn:LyricWiki#searchSongs");
            
            _send((java.lang.String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            webservice.LyricWikiPortType_searchSongs_ResponseStruct _myLyricWikiPortType_searchSongs_ResponseStruct = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _myLyricWikiPortType_searchSongs_ResponseStruct =
                    (webservice.LyricWikiPortType_searchSongs_ResponseStruct)((SOAPDeserializationState)_responseObj).getInstance();
            } else {
                _myLyricWikiPortType_searchSongs_ResponseStruct =
                    (webservice.LyricWikiPortType_searchSongs_ResponseStruct)_responseObj;
            }
            
            return _myLyricWikiPortType_searchSongs_ResponseStruct.get_return();
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of getAlbum
     */
    public void getAlbum(javax.xml.rpc.holders.StringHolder artist, javax.xml.rpc.holders.StringHolder album, javax.xml.rpc.holders.IntHolder year, javax.xml.rpc.holders.StringHolder amazonLink, javax.xml.rpc.holders.StringHolder imgUrl, javax.xml.rpc.holders.StringHolder url, webservice.holders.ArrayOfstringHolder songs)
        throws java.rmi.RemoteException {
        
        if (artist == null) {
            throw new IllegalArgumentException("artist cannot be null");
        }
        if (album == null) {
            throw new IllegalArgumentException("album cannot be null");
        }
        if (year == null) {
            throw new IllegalArgumentException("year cannot be null");
        }
        if (amazonLink == null) {
            throw new IllegalArgumentException("amazonLink cannot be null");
        }
        if (imgUrl == null) {
            throw new IllegalArgumentException("imgUrl cannot be null");
        }
        if (url == null) {
            throw new IllegalArgumentException("url cannot be null");
        }
        if (songs == null) {
            throw new IllegalArgumentException("songs cannot be null");
        }
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(getAlbum_OPCODE);
            webservice.LyricWikiPortType_getAlbum_RequestStruct _myLyricWikiPortType_getAlbum_RequestStruct =
                new webservice.LyricWikiPortType_getAlbum_RequestStruct();
            
            _myLyricWikiPortType_getAlbum_RequestStruct.setArtist(artist.value);
            _myLyricWikiPortType_getAlbum_RequestStruct.setAlbum(album.value);
            _myLyricWikiPortType_getAlbum_RequestStruct.setYear(year.value);
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_getAlbum_getAlbum_QNAME);
            _bodyBlock.setValue(_myLyricWikiPortType_getAlbum_RequestStruct);
            _bodyBlock.setSerializer(ns1_myLyricWikiPortType_getAlbum_RequestStruct_SOAPSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "urn:LyricWiki#getAlbum");
            
            _send((java.lang.String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            webservice.LyricWikiPortType_getAlbum_ResponseStruct _myLyricWikiPortType_getAlbum_ResponseStruct = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _myLyricWikiPortType_getAlbum_ResponseStruct =
                    (webservice.LyricWikiPortType_getAlbum_ResponseStruct)((SOAPDeserializationState)_responseObj).getInstance();
            } else {
                _myLyricWikiPortType_getAlbum_ResponseStruct =
                    (webservice.LyricWikiPortType_getAlbum_ResponseStruct)_responseObj;
            }
            
            artist.value =
                _myLyricWikiPortType_getAlbum_ResponseStruct.getArtist();
            album.value =
                _myLyricWikiPortType_getAlbum_ResponseStruct.getAlbum();
            year.value =
                _myLyricWikiPortType_getAlbum_ResponseStruct.getYear();
            amazonLink.value =
                _myLyricWikiPortType_getAlbum_ResponseStruct.getAmazonLink();
            imgUrl.value =
                _myLyricWikiPortType_getAlbum_ResponseStruct.getImgUrl();
            url.value =
                _myLyricWikiPortType_getAlbum_ResponseStruct.getUrl();
            songs.value =
                _myLyricWikiPortType_getAlbum_ResponseStruct.getSongs();
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of postAlbum
     */
    public void postAlbum(boolean overwriteIfExists, javax.xml.rpc.holders.StringHolder artist, javax.xml.rpc.holders.StringHolder album, javax.xml.rpc.holders.IntHolder year, java.lang.String asin, java.lang.String[] songs, javax.xml.rpc.holders.BooleanHolder dataUsed, javax.xml.rpc.holders.StringHolder message)
        throws java.rmi.RemoteException {
        
        if (artist == null) {
            throw new IllegalArgumentException("artist cannot be null");
        }
        if (album == null) {
            throw new IllegalArgumentException("album cannot be null");
        }
        if (year == null) {
            throw new IllegalArgumentException("year cannot be null");
        }
        if (dataUsed == null) {
            throw new IllegalArgumentException("dataUsed cannot be null");
        }
        if (message == null) {
            throw new IllegalArgumentException("message cannot be null");
        }
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(postAlbum_OPCODE);
            webservice.LyricWikiPortType_postAlbum_RequestStruct _myLyricWikiPortType_postAlbum_RequestStruct =
                new webservice.LyricWikiPortType_postAlbum_RequestStruct();
            
            _myLyricWikiPortType_postAlbum_RequestStruct.setOverwriteIfExists(overwriteIfExists);
            _myLyricWikiPortType_postAlbum_RequestStruct.setArtist(artist.value);
            _myLyricWikiPortType_postAlbum_RequestStruct.setAlbum(album.value);
            _myLyricWikiPortType_postAlbum_RequestStruct.setYear(year.value);
            _myLyricWikiPortType_postAlbum_RequestStruct.setAsin(asin);
            _myLyricWikiPortType_postAlbum_RequestStruct.setSongs(songs);
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_postAlbum_postAlbum_QNAME);
            _bodyBlock.setValue(_myLyricWikiPortType_postAlbum_RequestStruct);
            _bodyBlock.setSerializer(ns1_myLyricWikiPortType_postAlbum_RequestStruct_SOAPSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "urn:LyricWiki#postAlbum");
            
            _send((java.lang.String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            webservice.LyricWikiPortType_postAlbum_ResponseStruct _myLyricWikiPortType_postAlbum_ResponseStruct = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _myLyricWikiPortType_postAlbum_ResponseStruct =
                    (webservice.LyricWikiPortType_postAlbum_ResponseStruct)((SOAPDeserializationState)_responseObj).getInstance();
            } else {
                _myLyricWikiPortType_postAlbum_ResponseStruct =
                    (webservice.LyricWikiPortType_postAlbum_ResponseStruct)_responseObj;
            }
            
            artist.value =
                _myLyricWikiPortType_postAlbum_ResponseStruct.getArtist();
            album.value =
                _myLyricWikiPortType_postAlbum_ResponseStruct.getAlbum();
            year.value =
                _myLyricWikiPortType_postAlbum_ResponseStruct.getYear();
            dataUsed.value =
                _myLyricWikiPortType_postAlbum_ResponseStruct.isDataUsed();
            message.value =
                _myLyricWikiPortType_postAlbum_ResponseStruct.getMessage();
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of postArtist
     */
    public void postArtist(boolean overwriteIfExists, javax.xml.rpc.holders.StringHolder artist, webservice.AlbumData[] albums, javax.xml.rpc.holders.BooleanHolder dataUsed, javax.xml.rpc.holders.StringHolder message)
        throws java.rmi.RemoteException {
        
        if (artist == null) {
            throw new IllegalArgumentException("artist cannot be null");
        }
        if (dataUsed == null) {
            throw new IllegalArgumentException("dataUsed cannot be null");
        }
        if (message == null) {
            throw new IllegalArgumentException("message cannot be null");
        }
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(postArtist_OPCODE);
            webservice.LyricWikiPortType_postArtist_RequestStruct _myLyricWikiPortType_postArtist_RequestStruct =
                new webservice.LyricWikiPortType_postArtist_RequestStruct();
            
            _myLyricWikiPortType_postArtist_RequestStruct.setOverwriteIfExists(overwriteIfExists);
            _myLyricWikiPortType_postArtist_RequestStruct.setArtist(artist.value);
            _myLyricWikiPortType_postArtist_RequestStruct.setAlbums(albums);
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_postArtist_postArtist_QNAME);
            _bodyBlock.setValue(_myLyricWikiPortType_postArtist_RequestStruct);
            _bodyBlock.setSerializer(ns1_myLyricWikiPortType_postArtist_RequestStruct_SOAPSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "urn:LyricWiki#postArtist");
            
            _send((java.lang.String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            webservice.LyricWikiPortType_postArtist_ResponseStruct _myLyricWikiPortType_postArtist_ResponseStruct = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _myLyricWikiPortType_postArtist_ResponseStruct =
                    (webservice.LyricWikiPortType_postArtist_ResponseStruct)((SOAPDeserializationState)_responseObj).getInstance();
            } else {
                _myLyricWikiPortType_postArtist_ResponseStruct =
                    (webservice.LyricWikiPortType_postArtist_ResponseStruct)_responseObj;
            }
            
            artist.value =
                _myLyricWikiPortType_postArtist_ResponseStruct.getArtist();
            dataUsed.value =
                _myLyricWikiPortType_postArtist_ResponseStruct.isDataUsed();
            message.value =
                _myLyricWikiPortType_postArtist_ResponseStruct.getMessage();
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of getSOTD
     */
    public webservice.SOTDResult getSOTD()
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(getSOTD_OPCODE);
            webservice.LyricWikiPortType_getSOTD_RequestStruct _myLyricWikiPortType_getSOTD_RequestStruct =
                new webservice.LyricWikiPortType_getSOTD_RequestStruct();
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_getSOTD_getSOTD_QNAME);
            _bodyBlock.setValue(_myLyricWikiPortType_getSOTD_RequestStruct);
            _bodyBlock.setSerializer(ns1_myLyricWikiPortType_getSOTD_RequestStruct_SOAPSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "urn:LyricWiki#getSOTD");
            
            _send((java.lang.String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            webservice.LyricWikiPortType_getSOTD_ResponseStruct _myLyricWikiPortType_getSOTD_ResponseStruct = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _myLyricWikiPortType_getSOTD_ResponseStruct =
                    (webservice.LyricWikiPortType_getSOTD_ResponseStruct)((SOAPDeserializationState)_responseObj).getInstance();
            } else {
                _myLyricWikiPortType_getSOTD_ResponseStruct =
                    (webservice.LyricWikiPortType_getSOTD_ResponseStruct)_responseObj;
            }
            
            return _myLyricWikiPortType_getSOTD_ResponseStruct.get_return();
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    
    /*
     *  this method deserializes the request/response structure in the body
     */
    protected void _readFirstBodyElement(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState  state) throws Exception {
        int opcode = state.getRequest().getOperationCode();
        switch (opcode) {
            case getArtist_OPCODE:
                _deserialize_getArtist(bodyReader, deserializationContext, state);
                break;
            case getTopSongs_OPCODE:
                _deserialize_getTopSongs(bodyReader, deserializationContext, state);
                break;
            case getHometown_OPCODE:
                _deserialize_getHometown(bodyReader, deserializationContext, state);
                break;
            case searchArtists_OPCODE:
                _deserialize_searchArtists(bodyReader, deserializationContext, state);
                break;
            case getSongResult_OPCODE:
                _deserialize_getSongResult(bodyReader, deserializationContext, state);
                break;
            case getSong_OPCODE:
                _deserialize_getSong(bodyReader, deserializationContext, state);
                break;
            case postSong_OPCODE:
                _deserialize_postSong(bodyReader, deserializationContext, state);
                break;
            case checkSongExists_OPCODE:
                _deserialize_checkSongExists(bodyReader, deserializationContext, state);
                break;
            case postSong_flags_OPCODE:
                _deserialize_postSong_flags(bodyReader, deserializationContext, state);
                break;
            case searchAlbums_OPCODE:
                _deserialize_searchAlbums(bodyReader, deserializationContext, state);
                break;
            case searchSongs_OPCODE:
                _deserialize_searchSongs(bodyReader, deserializationContext, state);
                break;
            case getAlbum_OPCODE:
                _deserialize_getAlbum(bodyReader, deserializationContext, state);
                break;
            case postAlbum_OPCODE:
                _deserialize_postAlbum(bodyReader, deserializationContext, state);
                break;
            case postArtist_OPCODE:
                _deserialize_postArtist(bodyReader, deserializationContext, state);
                break;
            case getSOTD_OPCODE:
                _deserialize_getSOTD(bodyReader, deserializationContext, state);
                break;
            default:
                throw new SenderException("sender.response.unrecognizedOperation", java.lang.Integer.toString(opcode));
        }
    }
    
    
    
    /*
     * This method deserializes the body of the getArtist operation.
     */
    private void _deserialize_getArtist(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        java.lang.Object myLyricWikiPortType_getArtist_ResponseStructObj =
            ns1_myLyricWikiPortType_getArtist_ResponseStruct_SOAPSerializer.deserialize(ns1_getArtist_getArtistResponse_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_getArtist_getArtistResponse_QNAME);
        bodyBlock.setValue(myLyricWikiPortType_getArtist_ResponseStructObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the getTopSongs operation.
     */
    private void _deserialize_getTopSongs(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        java.lang.Object myLyricWikiPortType_getTopSongs_ResponseStructObj =
            ns1_myLyricWikiPortType_getTopSongs_ResponseStruct_SOAPSerializer.deserialize(ns1_getTopSongs_getTopSongsResponse_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_getTopSongs_getTopSongsResponse_QNAME);
        bodyBlock.setValue(myLyricWikiPortType_getTopSongs_ResponseStructObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the getHometown operation.
     */
    private void _deserialize_getHometown(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        java.lang.Object myLyricWikiPortType_getHometown_ResponseStructObj =
            ns1_myLyricWikiPortType_getHometown_ResponseStruct_SOAPSerializer.deserialize(ns1_getHometown_getHometownResponse_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_getHometown_getHometownResponse_QNAME);
        bodyBlock.setValue(myLyricWikiPortType_getHometown_ResponseStructObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the searchArtists operation.
     */
    private void _deserialize_searchArtists(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        java.lang.Object myLyricWikiPortType_searchArtists_ResponseStructObj =
            ns1_myLyricWikiPortType_searchArtists_ResponseStruct_SOAPSerializer.deserialize(ns1_searchArtists_searchArtistsResponse_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_searchArtists_searchArtistsResponse_QNAME);
        bodyBlock.setValue(myLyricWikiPortType_searchArtists_ResponseStructObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the getSongResult operation.
     */
    private void _deserialize_getSongResult(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        java.lang.Object myLyricWikiPortType_getSongResult_ResponseStructObj =
            ns1_myLyricWikiPortType_getSongResult_ResponseStruct_SOAPSerializer.deserialize(ns1_getSongResult_getSongResultResponse_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_getSongResult_getSongResultResponse_QNAME);
        bodyBlock.setValue(myLyricWikiPortType_getSongResult_ResponseStructObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the getSong operation.
     */
    private void _deserialize_getSong(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        java.lang.Object myLyricWikiPortType_getSong_ResponseStructObj =
            ns1_myLyricWikiPortType_getSong_ResponseStruct_SOAPSerializer.deserialize(ns1_getSong_getSongResponse_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_getSong_getSongResponse_QNAME);
        bodyBlock.setValue(myLyricWikiPortType_getSong_ResponseStructObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the postSong operation.
     */
    private void _deserialize_postSong(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        java.lang.Object myLyricWikiPortType_postSong_ResponseStructObj =
            ns1_myLyricWikiPortType_postSong_ResponseStruct_SOAPSerializer.deserialize(ns1_postSong_postSongResponse_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_postSong_postSongResponse_QNAME);
        bodyBlock.setValue(myLyricWikiPortType_postSong_ResponseStructObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the checkSongExists operation.
     */
    private void _deserialize_checkSongExists(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        java.lang.Object myLyricWikiPortType_checkSongExists_ResponseStructObj =
            ns1_myLyricWikiPortType_checkSongExists_ResponseStruct_SOAPSerializer.deserialize(ns1_checkSongExists_checkSongExistsResponse_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_checkSongExists_checkSongExistsResponse_QNAME);
        bodyBlock.setValue(myLyricWikiPortType_checkSongExists_ResponseStructObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the postSong_flags operation.
     */
    private void _deserialize_postSong_flags(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        java.lang.Object myLyricWikiPortType_postSong_flags_ResponseStructObj =
            ns1_myLyricWikiPortType_postSong_flags_ResponseStruct_SOAPSerializer.deserialize(ns1_postSong_flags_postSong_flagsResponse_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_postSong_flags_postSong_flagsResponse_QNAME);
        bodyBlock.setValue(myLyricWikiPortType_postSong_flags_ResponseStructObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the searchAlbums operation.
     */
    private void _deserialize_searchAlbums(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        java.lang.Object myLyricWikiPortType_searchAlbums_ResponseStructObj =
            ns1_myLyricWikiPortType_searchAlbums_ResponseStruct_SOAPSerializer.deserialize(ns1_searchAlbums_searchAlbumsResponse_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_searchAlbums_searchAlbumsResponse_QNAME);
        bodyBlock.setValue(myLyricWikiPortType_searchAlbums_ResponseStructObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the searchSongs operation.
     */
    private void _deserialize_searchSongs(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        java.lang.Object myLyricWikiPortType_searchSongs_ResponseStructObj =
            ns1_myLyricWikiPortType_searchSongs_ResponseStruct_SOAPSerializer.deserialize(ns1_searchSongs_searchSongsResponse_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_searchSongs_searchSongsResponse_QNAME);
        bodyBlock.setValue(myLyricWikiPortType_searchSongs_ResponseStructObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the getAlbum operation.
     */
    private void _deserialize_getAlbum(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        java.lang.Object myLyricWikiPortType_getAlbum_ResponseStructObj =
            ns1_myLyricWikiPortType_getAlbum_ResponseStruct_SOAPSerializer.deserialize(ns1_getAlbum_getAlbumResponse_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_getAlbum_getAlbumResponse_QNAME);
        bodyBlock.setValue(myLyricWikiPortType_getAlbum_ResponseStructObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the postAlbum operation.
     */
    private void _deserialize_postAlbum(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        java.lang.Object myLyricWikiPortType_postAlbum_ResponseStructObj =
            ns1_myLyricWikiPortType_postAlbum_ResponseStruct_SOAPSerializer.deserialize(ns1_postAlbum_postAlbumResponse_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_postAlbum_postAlbumResponse_QNAME);
        bodyBlock.setValue(myLyricWikiPortType_postAlbum_ResponseStructObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the postArtist operation.
     */
    private void _deserialize_postArtist(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        java.lang.Object myLyricWikiPortType_postArtist_ResponseStructObj =
            ns1_myLyricWikiPortType_postArtist_ResponseStruct_SOAPSerializer.deserialize(ns1_postArtist_postArtistResponse_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_postArtist_postArtistResponse_QNAME);
        bodyBlock.setValue(myLyricWikiPortType_postArtist_ResponseStructObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the getSOTD operation.
     */
    private void _deserialize_getSOTD(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        java.lang.Object myLyricWikiPortType_getSOTD_ResponseStructObj =
            ns1_myLyricWikiPortType_getSOTD_ResponseStruct_SOAPSerializer.deserialize(ns1_getSOTD_getSOTDResponse_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_getSOTD_getSOTDResponse_QNAME);
        bodyBlock.setValue(myLyricWikiPortType_getSOTD_ResponseStructObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    
    
    public java.lang.String _getDefaultEnvelopeEncodingStyle() {
        return SOAPNamespaceConstants.ENCODING;
    }
    
    public java.lang.String _getImplicitEnvelopeEncodingStyle() {
        return "";
    }
    
    public java.lang.String _getEncodingStyle() {
        return SOAPNamespaceConstants.ENCODING;
    }
    
    public void _setEncodingStyle(java.lang.String encodingStyle) {
        throw new UnsupportedOperationException("cannot set encoding style");
    }
    
    
    
    
    
    /*
     * This method returns an array containing (prefix, nsURI) pairs.
     */
    protected java.lang.String[] _getNamespaceDeclarations() {
        return myNamespace_declarations;
    }
    
    /*
     * This method returns an array containing the names of the headers we understand.
     */
    public javax.xml.namespace.QName[] _getUnderstoodHeaders() {
        return understoodHeaderNames;
    }
    
    public void _initialize(InternalTypeMappingRegistry registry) throws Exception {
        super._initialize(registry);
        ns1_myLyricWikiPortType_getSongResult_ResponseStruct_SOAPSerializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, webservice.LyricWikiPortType_getSongResult_ResponseStruct.class, ns1_getSongResultResponse_TYPE_QNAME);
        ns1_myLyricWikiPortType_getTopSongs_ResponseStruct_SOAPSerializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, webservice.LyricWikiPortType_getTopSongs_ResponseStruct.class, ns1_getTopSongsResponse_TYPE_QNAME);
        ns1_myLyricWikiPortType_getArtist_RequestStruct_SOAPSerializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, webservice.LyricWikiPortType_getArtist_RequestStruct.class, ns1_getArtist_TYPE_QNAME);
        ns1_myLyricWikiPortType_postArtist_RequestStruct_SOAPSerializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, webservice.LyricWikiPortType_postArtist_RequestStruct.class, ns1_postArtist_TYPE_QNAME);
        ns1_myLyricWikiPortType_searchSongs_ResponseStruct_SOAPSerializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, webservice.LyricWikiPortType_searchSongs_ResponseStruct.class, ns1_searchSongsResponse_TYPE_QNAME);
        ns1_myLyricWikiPortType_postArtist_ResponseStruct_SOAPSerializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, webservice.LyricWikiPortType_postArtist_ResponseStruct.class, ns1_postArtistResponse_TYPE_QNAME);
        ns1_myLyricWikiPortType_getHometown_ResponseStruct_SOAPSerializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, webservice.LyricWikiPortType_getHometown_ResponseStruct.class, ns1_getHometownResponse_TYPE_QNAME);
        ns1_myLyricWikiPortType_searchAlbums_ResponseStruct_SOAPSerializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, webservice.LyricWikiPortType_searchAlbums_ResponseStruct.class, ns1_searchAlbumsResponse_TYPE_QNAME);
        ns1_myLyricWikiPortType_getArtist_ResponseStruct_SOAPSerializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, webservice.LyricWikiPortType_getArtist_ResponseStruct.class, ns1_getArtistResponse_TYPE_QNAME);
        ns1_myLyricWikiPortType_postSong_flags_RequestStruct_SOAPSerializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, webservice.LyricWikiPortType_postSong_flags_RequestStruct.class, ns1_postSong_flags_TYPE_QNAME);
        ns1_myLyricWikiPortType_getAlbum_ResponseStruct_SOAPSerializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, webservice.LyricWikiPortType_getAlbum_ResponseStruct.class, ns1_getAlbumResponse_TYPE_QNAME);
        ns1_myLyricWikiPortType_searchArtists_ResponseStruct_SOAPSerializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, webservice.LyricWikiPortType_searchArtists_ResponseStruct.class, ns1_searchArtistsResponse_TYPE_QNAME);
        ns1_myLyricWikiPortType_postSong_RequestStruct_SOAPSerializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, webservice.LyricWikiPortType_postSong_RequestStruct.class, ns1_postSong_TYPE_QNAME);
        ns1_myLyricWikiPortType_getSong_RequestStruct_SOAPSerializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, webservice.LyricWikiPortType_getSong_RequestStruct.class, ns1_getSong_TYPE_QNAME);
        ns1_myLyricWikiPortType_getSOTD_RequestStruct_SOAPSerializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, webservice.LyricWikiPortType_getSOTD_RequestStruct.class, ns1_getSOTD_TYPE_QNAME);
        ns1_myLyricWikiPortType_postAlbum_ResponseStruct_SOAPSerializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, webservice.LyricWikiPortType_postAlbum_ResponseStruct.class, ns1_postAlbumResponse_TYPE_QNAME);
        ns1_myLyricWikiPortType_getHometown_RequestStruct_SOAPSerializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, webservice.LyricWikiPortType_getHometown_RequestStruct.class, ns1_getHometown_TYPE_QNAME);
        ns1_myLyricWikiPortType_postSong_ResponseStruct_SOAPSerializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, webservice.LyricWikiPortType_postSong_ResponseStruct.class, ns1_postSongResponse_TYPE_QNAME);
        ns1_myLyricWikiPortType_checkSongExists_RequestStruct_SOAPSerializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, webservice.LyricWikiPortType_checkSongExists_RequestStruct.class, ns1_checkSongExists_TYPE_QNAME);
        ns1_myLyricWikiPortType_postAlbum_RequestStruct_SOAPSerializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, webservice.LyricWikiPortType_postAlbum_RequestStruct.class, ns1_postAlbum_TYPE_QNAME);
        ns1_myLyricWikiPortType_getSongResult_RequestStruct_SOAPSerializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, webservice.LyricWikiPortType_getSongResult_RequestStruct.class, ns1_getSongResult_TYPE_QNAME);
        ns1_myLyricWikiPortType_searchSongs_RequestStruct_SOAPSerializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, webservice.LyricWikiPortType_searchSongs_RequestStruct.class, ns1_searchSongs_TYPE_QNAME);
        ns1_myLyricWikiPortType_getSong_ResponseStruct_SOAPSerializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, webservice.LyricWikiPortType_getSong_ResponseStruct.class, ns1_getSongResponse_TYPE_QNAME);
        ns1_myLyricWikiPortType_getSOTD_ResponseStruct_SOAPSerializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, webservice.LyricWikiPortType_getSOTD_ResponseStruct.class, ns1_getSOTDResponse_TYPE_QNAME);
        ns1_myLyricWikiPortType_searchAlbums_RequestStruct_SOAPSerializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, webservice.LyricWikiPortType_searchAlbums_RequestStruct.class, ns1_searchAlbums_TYPE_QNAME);
        ns1_myLyricWikiPortType_searchArtists_RequestStruct_SOAPSerializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, webservice.LyricWikiPortType_searchArtists_RequestStruct.class, ns1_searchArtists_TYPE_QNAME);
        ns1_myLyricWikiPortType_getAlbum_RequestStruct_SOAPSerializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, webservice.LyricWikiPortType_getAlbum_RequestStruct.class, ns1_getAlbum_TYPE_QNAME);
        ns1_myLyricWikiPortType_checkSongExists_ResponseStruct_SOAPSerializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, webservice.LyricWikiPortType_checkSongExists_ResponseStruct.class, ns1_checkSongExistsResponse_TYPE_QNAME);
        ns1_myLyricWikiPortType_postSong_flags_ResponseStruct_SOAPSerializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, webservice.LyricWikiPortType_postSong_flags_ResponseStruct.class, ns1_postSong_flagsResponse_TYPE_QNAME);
        ns1_myLyricWikiPortType_getTopSongs_RequestStruct_SOAPSerializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, webservice.LyricWikiPortType_getTopSongs_RequestStruct.class, ns1_getTopSongs_TYPE_QNAME);
    }
    
    private static final javax.xml.namespace.QName _portName = new QName("urn:LyricWiki", "LyricWikiPort");
    private static final int getArtist_OPCODE = 0;
    private static final int getTopSongs_OPCODE = 1;
    private static final int getHometown_OPCODE = 2;
    private static final int searchArtists_OPCODE = 3;
    private static final int getSongResult_OPCODE = 4;
    private static final int getSong_OPCODE = 5;
    private static final int postSong_OPCODE = 6;
    private static final int checkSongExists_OPCODE = 7;
    private static final int postSong_flags_OPCODE = 8;
    private static final int searchAlbums_OPCODE = 9;
    private static final int searchSongs_OPCODE = 10;
    private static final int getAlbum_OPCODE = 11;
    private static final int postAlbum_OPCODE = 12;
    private static final int postArtist_OPCODE = 13;
    private static final int getSOTD_OPCODE = 14;
    private static final javax.xml.namespace.QName ns1_getArtist_getArtist_QNAME = new QName("urn:LyricWiki", "getArtist");
    private static final javax.xml.namespace.QName ns1_getArtist_TYPE_QNAME = new QName("urn:LyricWiki", "getArtist");
    private CombinedSerializer ns1_myLyricWikiPortType_getArtist_RequestStruct_SOAPSerializer;
    private static final javax.xml.namespace.QName ns1_getArtist_getArtistResponse_QNAME = new QName("urn:LyricWiki", "getArtistResponse");
    private static final javax.xml.namespace.QName ns1_getArtistResponse_TYPE_QNAME = new QName("urn:LyricWiki", "getArtistResponse");
    private CombinedSerializer ns1_myLyricWikiPortType_getArtist_ResponseStruct_SOAPSerializer;
    private static final javax.xml.namespace.QName ns1_getTopSongs_getTopSongs_QNAME = new QName("urn:LyricWiki", "getTopSongs");
    private static final javax.xml.namespace.QName ns1_getTopSongs_TYPE_QNAME = new QName("urn:LyricWiki", "getTopSongs");
    private CombinedSerializer ns1_myLyricWikiPortType_getTopSongs_RequestStruct_SOAPSerializer;
    private static final javax.xml.namespace.QName ns1_getTopSongs_getTopSongsResponse_QNAME = new QName("urn:LyricWiki", "getTopSongsResponse");
    private static final javax.xml.namespace.QName ns1_getTopSongsResponse_TYPE_QNAME = new QName("urn:LyricWiki", "getTopSongsResponse");
    private CombinedSerializer ns1_myLyricWikiPortType_getTopSongs_ResponseStruct_SOAPSerializer;
    private static final javax.xml.namespace.QName ns1_getHometown_getHometown_QNAME = new QName("urn:LyricWiki", "getHometown");
    private static final javax.xml.namespace.QName ns1_getHometown_TYPE_QNAME = new QName("urn:LyricWiki", "getHometown");
    private CombinedSerializer ns1_myLyricWikiPortType_getHometown_RequestStruct_SOAPSerializer;
    private static final javax.xml.namespace.QName ns1_getHometown_getHometownResponse_QNAME = new QName("urn:LyricWiki", "getHometownResponse");
    private static final javax.xml.namespace.QName ns1_getHometownResponse_TYPE_QNAME = new QName("urn:LyricWiki", "getHometownResponse");
    private CombinedSerializer ns1_myLyricWikiPortType_getHometown_ResponseStruct_SOAPSerializer;
    private static final javax.xml.namespace.QName ns1_searchArtists_searchArtists_QNAME = new QName("urn:LyricWiki", "searchArtists");
    private static final javax.xml.namespace.QName ns1_searchArtists_TYPE_QNAME = new QName("urn:LyricWiki", "searchArtists");
    private CombinedSerializer ns1_myLyricWikiPortType_searchArtists_RequestStruct_SOAPSerializer;
    private static final javax.xml.namespace.QName ns1_searchArtists_searchArtistsResponse_QNAME = new QName("urn:LyricWiki", "searchArtistsResponse");
    private static final javax.xml.namespace.QName ns1_searchArtistsResponse_TYPE_QNAME = new QName("urn:LyricWiki", "searchArtistsResponse");
    private CombinedSerializer ns1_myLyricWikiPortType_searchArtists_ResponseStruct_SOAPSerializer;
    private static final javax.xml.namespace.QName ns1_getSongResult_getSongResult_QNAME = new QName("urn:LyricWiki", "getSongResult");
    private static final javax.xml.namespace.QName ns1_getSongResult_TYPE_QNAME = new QName("urn:LyricWiki", "getSongResult");
    private CombinedSerializer ns1_myLyricWikiPortType_getSongResult_RequestStruct_SOAPSerializer;
    private static final javax.xml.namespace.QName ns1_getSongResult_getSongResultResponse_QNAME = new QName("urn:LyricWiki", "getSongResultResponse");
    private static final javax.xml.namespace.QName ns1_getSongResultResponse_TYPE_QNAME = new QName("urn:LyricWiki", "getSongResultResponse");
    private CombinedSerializer ns1_myLyricWikiPortType_getSongResult_ResponseStruct_SOAPSerializer;
    private static final javax.xml.namespace.QName ns1_getSong_getSong_QNAME = new QName("urn:LyricWiki", "getSong");
    private static final javax.xml.namespace.QName ns1_getSong_TYPE_QNAME = new QName("urn:LyricWiki", "getSong");
    private CombinedSerializer ns1_myLyricWikiPortType_getSong_RequestStruct_SOAPSerializer;
    private static final javax.xml.namespace.QName ns1_getSong_getSongResponse_QNAME = new QName("urn:LyricWiki", "getSongResponse");
    private static final javax.xml.namespace.QName ns1_getSongResponse_TYPE_QNAME = new QName("urn:LyricWiki", "getSongResponse");
    private CombinedSerializer ns1_myLyricWikiPortType_getSong_ResponseStruct_SOAPSerializer;
    private static final javax.xml.namespace.QName ns1_postSong_postSong_QNAME = new QName("urn:LyricWiki", "postSong");
    private static final javax.xml.namespace.QName ns1_postSong_TYPE_QNAME = new QName("urn:LyricWiki", "postSong");
    private CombinedSerializer ns1_myLyricWikiPortType_postSong_RequestStruct_SOAPSerializer;
    private static final javax.xml.namespace.QName ns1_postSong_postSongResponse_QNAME = new QName("urn:LyricWiki", "postSongResponse");
    private static final javax.xml.namespace.QName ns1_postSongResponse_TYPE_QNAME = new QName("urn:LyricWiki", "postSongResponse");
    private CombinedSerializer ns1_myLyricWikiPortType_postSong_ResponseStruct_SOAPSerializer;
    private static final javax.xml.namespace.QName ns1_checkSongExists_checkSongExists_QNAME = new QName("urn:LyricWiki", "checkSongExists");
    private static final javax.xml.namespace.QName ns1_checkSongExists_TYPE_QNAME = new QName("urn:LyricWiki", "checkSongExists");
    private CombinedSerializer ns1_myLyricWikiPortType_checkSongExists_RequestStruct_SOAPSerializer;
    private static final javax.xml.namespace.QName ns1_checkSongExists_checkSongExistsResponse_QNAME = new QName("urn:LyricWiki", "checkSongExistsResponse");
    private static final javax.xml.namespace.QName ns1_checkSongExistsResponse_TYPE_QNAME = new QName("urn:LyricWiki", "checkSongExistsResponse");
    private CombinedSerializer ns1_myLyricWikiPortType_checkSongExists_ResponseStruct_SOAPSerializer;
    private static final javax.xml.namespace.QName ns1_postSong_flags_postSong_flags_QNAME = new QName("urn:LyricWiki", "postSong_flags");
    private static final javax.xml.namespace.QName ns1_postSong_flags_TYPE_QNAME = new QName("urn:LyricWiki", "postSong_flags");
    private CombinedSerializer ns1_myLyricWikiPortType_postSong_flags_RequestStruct_SOAPSerializer;
    private static final javax.xml.namespace.QName ns1_postSong_flags_postSong_flagsResponse_QNAME = new QName("urn:LyricWiki", "postSong_flagsResponse");
    private static final javax.xml.namespace.QName ns1_postSong_flagsResponse_TYPE_QNAME = new QName("urn:LyricWiki", "postSong_flagsResponse");
    private CombinedSerializer ns1_myLyricWikiPortType_postSong_flags_ResponseStruct_SOAPSerializer;
    private static final javax.xml.namespace.QName ns1_searchAlbums_searchAlbums_QNAME = new QName("urn:LyricWiki", "searchAlbums");
    private static final javax.xml.namespace.QName ns1_searchAlbums_TYPE_QNAME = new QName("urn:LyricWiki", "searchAlbums");
    private CombinedSerializer ns1_myLyricWikiPortType_searchAlbums_RequestStruct_SOAPSerializer;
    private static final javax.xml.namespace.QName ns1_searchAlbums_searchAlbumsResponse_QNAME = new QName("urn:LyricWiki", "searchAlbumsResponse");
    private static final javax.xml.namespace.QName ns1_searchAlbumsResponse_TYPE_QNAME = new QName("urn:LyricWiki", "searchAlbumsResponse");
    private CombinedSerializer ns1_myLyricWikiPortType_searchAlbums_ResponseStruct_SOAPSerializer;
    private static final javax.xml.namespace.QName ns1_searchSongs_searchSongs_QNAME = new QName("urn:LyricWiki", "searchSongs");
    private static final javax.xml.namespace.QName ns1_searchSongs_TYPE_QNAME = new QName("urn:LyricWiki", "searchSongs");
    private CombinedSerializer ns1_myLyricWikiPortType_searchSongs_RequestStruct_SOAPSerializer;
    private static final javax.xml.namespace.QName ns1_searchSongs_searchSongsResponse_QNAME = new QName("urn:LyricWiki", "searchSongsResponse");
    private static final javax.xml.namespace.QName ns1_searchSongsResponse_TYPE_QNAME = new QName("urn:LyricWiki", "searchSongsResponse");
    private CombinedSerializer ns1_myLyricWikiPortType_searchSongs_ResponseStruct_SOAPSerializer;
    private static final javax.xml.namespace.QName ns1_getAlbum_getAlbum_QNAME = new QName("urn:LyricWiki", "getAlbum");
    private static final javax.xml.namespace.QName ns1_getAlbum_TYPE_QNAME = new QName("urn:LyricWiki", "getAlbum");
    private CombinedSerializer ns1_myLyricWikiPortType_getAlbum_RequestStruct_SOAPSerializer;
    private static final javax.xml.namespace.QName ns1_getAlbum_getAlbumResponse_QNAME = new QName("urn:LyricWiki", "getAlbumResponse");
    private static final javax.xml.namespace.QName ns1_getAlbumResponse_TYPE_QNAME = new QName("urn:LyricWiki", "getAlbumResponse");
    private CombinedSerializer ns1_myLyricWikiPortType_getAlbum_ResponseStruct_SOAPSerializer;
    private static final javax.xml.namespace.QName ns1_postAlbum_postAlbum_QNAME = new QName("urn:LyricWiki", "postAlbum");
    private static final javax.xml.namespace.QName ns1_postAlbum_TYPE_QNAME = new QName("urn:LyricWiki", "postAlbum");
    private CombinedSerializer ns1_myLyricWikiPortType_postAlbum_RequestStruct_SOAPSerializer;
    private static final javax.xml.namespace.QName ns1_postAlbum_postAlbumResponse_QNAME = new QName("urn:LyricWiki", "postAlbumResponse");
    private static final javax.xml.namespace.QName ns1_postAlbumResponse_TYPE_QNAME = new QName("urn:LyricWiki", "postAlbumResponse");
    private CombinedSerializer ns1_myLyricWikiPortType_postAlbum_ResponseStruct_SOAPSerializer;
    private static final javax.xml.namespace.QName ns1_postArtist_postArtist_QNAME = new QName("urn:LyricWiki", "postArtist");
    private static final javax.xml.namespace.QName ns1_postArtist_TYPE_QNAME = new QName("urn:LyricWiki", "postArtist");
    private CombinedSerializer ns1_myLyricWikiPortType_postArtist_RequestStruct_SOAPSerializer;
    private static final javax.xml.namespace.QName ns1_postArtist_postArtistResponse_QNAME = new QName("urn:LyricWiki", "postArtistResponse");
    private static final javax.xml.namespace.QName ns1_postArtistResponse_TYPE_QNAME = new QName("urn:LyricWiki", "postArtistResponse");
    private CombinedSerializer ns1_myLyricWikiPortType_postArtist_ResponseStruct_SOAPSerializer;
    private static final javax.xml.namespace.QName ns1_getSOTD_getSOTD_QNAME = new QName("urn:LyricWiki", "getSOTD");
    private static final javax.xml.namespace.QName ns1_getSOTD_TYPE_QNAME = new QName("urn:LyricWiki", "getSOTD");
    private CombinedSerializer ns1_myLyricWikiPortType_getSOTD_RequestStruct_SOAPSerializer;
    private static final javax.xml.namespace.QName ns1_getSOTD_getSOTDResponse_QNAME = new QName("urn:LyricWiki", "getSOTDResponse");
    private static final javax.xml.namespace.QName ns1_getSOTDResponse_TYPE_QNAME = new QName("urn:LyricWiki", "getSOTDResponse");
    private CombinedSerializer ns1_myLyricWikiPortType_getSOTD_ResponseStruct_SOAPSerializer;
    private static final java.lang.String[] myNamespace_declarations =
                                        new java.lang.String[] {
                                            "ns0", "urn:LyricWiki"
                                        };
    
    private static final QName[] understoodHeaderNames = new QName[] {  };
}
